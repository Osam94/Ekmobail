import logging
import os
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.webhook import SendMessage
from aiogram.utils.executor import start_webhook
from utils.pdf_parser import parse_pdf  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
from pathlib import Path

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

app = FastAPI()
logging.basicConfig(level=logging.INFO)

PDF_PATH = Path("data") / "current.pdf"
PDF_PATH.parent.mkdir(exist_ok=True)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª, –∏ —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é.")

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_pdf(message: types.Message):
    document = message.document
    if not document.mime_type == "application/pdf":
        await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
        return

    file = await bot.get_file(document.file_id)
    file_path = file.file_path
    await bot.download_file(file_path, destination=PDF_PATH)

    try:
        rows = parse_pdf(PDF_PATH)
        preview = "\n".join(rows[:10])
        await message.reply(f"üìÑ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω:\n\n{preview}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF.")

@app.post(WEBHOOK_PATH)
async def handle_webhook(request: Request):
    update = types.Update(**await request.json())
    await dp.process_update(update)
    return "ok"

@app.on_event("startup")
async def on_startup():
    logging.warning("‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫...")
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    logging.warning("üîª –£–¥–∞–ª—è—é –≤–µ–±—Ö—É–∫...")
    await bot.delete_webhook()
