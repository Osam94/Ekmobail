import os
import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.webhook import SendMessage
from utils.pdf_parser import parse_pdf

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_URL:
    raise ValueError("BOT_TOKEN –∏ WEBHOOK_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_FULL_URL = WEBHOOK_URL + WEBHOOK_PATH

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

app = FastAPI()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å PDF.")

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_docs(message: types.Message):
    document = message.document
    if document.mime_type != 'application/pdf':
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.")
        return

    file_info = await bot.get_file(document.file_id)
    file_path = file_info.file_path
    file = await bot.download_file(file_path)
    local_path = f"temp/{document.file_name}"

    os.makedirs("temp", exist_ok=True)
    with open(local_path, "wb") as f:
        f.write(file.read())

    lines = parse_pdf(local_path)
    preview = "\n".join(lines)
    await message.reply(f"üìÑ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω:

{preview}")

@app.on_event("startup")
async def on_startup():
    logger.info("‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫...")
    await bot.set_webhook(WEBHOOK_FULL_URL)
    logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_FULL_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    logger.info("üßπ –£–¥–∞–ª—è—é –≤–µ–±—Ö—É–∫...")
    await bot.delete_webhook()

@app.post(WEBHOOK_PATH)
async def handle_webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.process_update(update)
    return {"ok": True}

@app.get("/")
async def root():
    return {"status": "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", "webhook": WEBHOOK_FULL_URL}